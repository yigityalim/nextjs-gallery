{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/lib/toc.ts"],
  "sourcesContent": ["import {\n\ttype ComputedFields,\n\ttype FieldDefs,\n\tdefineDocumentType,\n\tdefineNestedType,\n\tmakeSource,\n} from \"contentlayer2/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeUnwrapImages from \"rehype-unwrap-images\";\nimport remarkGfm from \"remark-gfm\";\n\nimport { getTableOfContents } from \"@/lib/toc\";\n\nconst computedFields = {\n\tslug: {\n\t\ttype: \"string\",\n\t\tresolve: (doc) => `/${doc._raw.flattenedPath}`.replace(/\\/\\d{2}-/g, \"/\"),\n\t},\n\tslugAsParams: {\n\t\ttype: \"string\",\n\t\tresolve: (doc) =>\n\t\t\t`${doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\")}`.replace(\n\t\t\t\t/\\/\\d{2}-/g,\n\t\t\t\t\"/\",\n\t\t\t),\n\t},\n\ttableOfContents: {\n\t\ttype: \"json\",\n\t\tresolve: async (post) => {\n\t\t\treturn await getTableOfContents(post.body.raw);\n\t\t},\n\t},\n} satisfies ComputedFields;\n\nconst AuthorsProperties = defineNestedType(() => ({\n\tname: \"AuthorsProperties\",\n\tfields: {\n\t\tname: { type: \"string\" },\n\t\trole: { type: \"string\" },\n\t\tavatar: { type: \"string\" },\n\t},\n}));\n\nconst defaultFields = {\n\ttitle: {\n\t\ttype: \"string\",\n\t\trequired: true,\n\t},\n\tdescription: {\n\t\ttype: \"string\",\n\t},\n\tdate: { type: \"date\", required: true },\n\tauthors: { type: \"list\", of: AuthorsProperties, required: true },\n\tcategories: { type: \"list\", of: { type: \"string\" } },\n\tpublished: {\n\t\ttype: \"boolean\",\n\t\tdefault: true,\n\t},\n\ttoc: {\n\t\ttype: \"boolean\",\n\t\tdefault: true,\n\t\trequired: false,\n\t},\n} satisfies FieldDefs;\n\nexport const Post = defineDocumentType(() => ({\n\tname: \"Post\",\n\tfilePathPattern: \"posts/**/*.mdx\",\n\tcontentType: \"mdx\",\n\tfields: defaultFields,\n\tcomputedFields,\n}));\n\nexport default makeSource({\n\tcontentDirPath: \"./src/content\",\n\tdocumentTypes: [Post],\n\tmdx: {\n\t\tremarkPlugins: [remarkGfm],\n\t\trehypePlugins: [\n\t\t\trehypeSlug,\n\t\t\trehypeUnwrapImages,\n\t\t\t[\n\t\t\t\trehypeAutolinkHeadings,\n\t\t\t\t{\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tclassName: [\"subheading-anchor\"],\n\t\t\t\t\t\tariaLabel: \"Link to section\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t},\n});\n", "// @ts-nocheck\n\nimport { toc } from \"mdast-util-toc\";\nimport { remark } from \"remark\";\nimport sluggify from \"slugify\";\nimport { visit } from \"unist-util-visit\";\n\nconst textTypes = [\"text\", \"emphasis\", \"strong\", \"inlineCode\"];\n\nfunction flattenNode(node) {\n\tconst p = [];\n\tvisit(node, (node) => {\n\t\tif (!textTypes.includes(node.type)) return;\n\t\tp.push(node.value);\n\t});\n\treturn p.join(\"\");\n}\n\ninterface Item {\n\ttitle: string;\n\turl: string;\n\titems?: Item[];\n}\n\ninterface Items {\n\titems?: Item[];\n}\n\nfunction getItems(node, current): Items {\n\tif (!node) {\n\t\treturn {};\n\t}\n\n\tif (node.type === \"paragraph\") {\n\t\tvisit(node, (item) => {\n\t\t\tif (item.type === \"link\") {\n\t\t\t\tcurrent.url = `#${sluggify(item.url)}`;\n\t\t\t\tcurrent.title = flattenNode(node);\n\t\t\t}\n\n\t\t\tif (item.type === \"text\") {\n\t\t\t\tcurrent.title = flattenNode(node);\n\t\t\t}\n\t\t});\n\n\t\treturn current;\n\t}\n\n\tif (node.type === \"list\") {\n\t\tcurrent.items = node.children.map((i) => getItems(i, {}));\n\n\t\treturn current;\n\t}\n\tif (node.type === \"listItem\") {\n\t\tconst heading = getItems(node.children[0], {});\n\n\t\tif (node.children.length > 1) {\n\t\t\tgetItems(node.children[1], heading);\n\t\t}\n\n\t\treturn heading;\n\t}\n\n\treturn {};\n}\n\nconst getToc = () => (node, file) => {\n\tconst table = toc(node);\n\tfile.data = getItems(table.map, {});\n};\n\nexport type TableOfContents = Items;\n\nexport async function getTableOfContents(\n\tcontent: string,\n): Promise<TableOfContents> {\n\tconst result = await remark().use(getToc).process(content);\n\treturn result.data;\n}\n"],
  "mappings": "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",
  "names": ["node"]
}
